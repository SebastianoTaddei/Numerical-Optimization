% Define some test functions
TESTS = {
  { 0.5, 1.0, @(x) exp(x) + 1./x                  }, ...
  { 0.5, 2.0, @(x) 5./x + x.*x                    }, ...
  { 0.8, 2.0, @(x) -5./(x.*(x - 2) + 5)           }, ...
  { 0.0, 1.5, @(x) exp(-2.*x) + x.*x./2           }, ...
  { 0.0, 1.5, @(x) exp(x - 1) + 1./x              }, ...
  { 0.0, 1.0, @(x) x.*(x - exp(-x))               }, ...
  { 0.0, 2.5, @(x) 5.*x.*x + 1./x                 }, ...
  {-3.0, 0.0, @(x) exp(-x) + 1./(1 - x)           }, ...
  { 0.0, 2.0, @(x) 2 + x.*(x-1)                   }, ...
  { 0.0, 3.0, @(x) -x.*exp(-0.5.*x)               }, ...
  { 0.0, 3.0, @(x) -(0.2.*x + sin(2.*x))          }, ...
  { 0.0, 0.5, @(x) (exp(-x) - 1./x)               }, ...
  {-1.0, 0.0, @(x) exp(x) + x.*x                  }, ...
  {-1.0, 0.0, @(x) x.*(4 + x.*(2 + x.*x))         }, ...
  {-1.0, 0.0, @(x) x.*x + sin(x)                  }, ...
  {-1.0, 1.0, @(x) exp(x) + 1./(x + 2)            }, ...
  {-2.0, 0.0, @(x) 2./(x.*x)                      }, ...
  { 2.0, 6.0, @(x) -5.*x.*x.*exp(-0.5.*x)         }, ...
  { 4.0, 9.0, @(x) -(0.1.*x + cos(x))             }, ...
  { 4.0, 9.0, @(x) x.*x - cos(1.5.*x)./sin(1.5.*x)}
};

% Instantiate the object
GSM = GoldenSectionMinimization();

% Prepare figure
figure();

% Minimize all test functions
for i = 1:length(TESTS)
    % Unpack test values
    a   = TESTS{i}{1};
    b   = TESTS{i}{2};
    fun = TESTS{i}{3};

    % Initialize subplot
    subplot(4, 5, i);

    % Evaluate function
    dx = 1;
    x  = (a - dx):1e-3:(b + dx);
    fx = feval(fun, x);

    % Plot function
    plot(x, fx, 'r');

    % Minimize
    [a_min, b_min] = GSM.minimize(fun, a, b);

    % Set x limit for plot purposes
    xlim([a_min - dx, b_min + dx])

    % Compute fixed height for the interval plot
    dy = -0.1;
    y0 = min(feval(fun, a_min), feval(fun, b_min)) + 3*dy;

    % Plot range history
    GSM.plot_history(y0, dy);
end